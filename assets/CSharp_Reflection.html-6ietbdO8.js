import{_ as l,c,a as s,b as p,d as e,e as i,r as o,o as u,f as t}from"./app-JA8LqgYW.js";const r={},k={class:"table-of-contents"};function d(m,n){const a=o("router-link");return u(),c("div",null,[n[8]||(n[8]=s("h1",{id:"反射-reflection",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#反射-reflection"},[s("span",null,"反射（Reflection）")])],-1)),s("nav",k,[s("ul",null,[s("li",null,[p(a,{to:"#官方定义"},{default:e(()=>n[0]||(n[0]=[t("官方定义")])),_:1})]),s("li",null,[p(a,{to:"#个人理解"},{default:e(()=>n[1]||(n[1]=[t("个人理解")])),_:1})]),s("li",null,[p(a,{to:"#应用"},{default:e(()=>n[2]||(n[2]=[t("应用")])),_:1})]),s("li",null,[p(a,{to:"#优点"},{default:e(()=>n[3]||(n[3]=[t("优点")])),_:1})]),s("li",null,[p(a,{to:"#缺点"},{default:e(()=>n[4]||(n[4]=[t("缺点")])),_:1})]),s("li",null,[p(a,{to:"#总结"},{default:e(()=>n[5]||(n[5]=[t("总结")])),_:1})]),s("li",null,[p(a,{to:"#拓展"},{default:e(()=>n[6]||(n[6]=[t("拓展")])),_:1})]),s("li",null,[p(a,{to:"#拓展参考"},{default:e(()=>n[7]||(n[7]=[t("拓展参考")])),_:1})])])]),n[9]||(n[9]=i(`<h2 id="官方定义" tabindex="-1"><a class="header-anchor" href="#官方定义"><span><a href="https://learn.microsoft.com/zh-cn/dotnet/fundamentals/reflection/reflection" target="_blank" rel="noopener noreferrer">官方定义</a></span></a></h2><p>System.Reflection 命名空间中的 类 与 System.Type 使你能够获取有关加载的<strong>程序集</strong>和其中定义的<strong>类型的信息</strong>，如类、接口和值类型（即结构和枚举）。 可以使用反射在运行时创建、调用和访问类型实例。</p><p><a href="https://learn.microsoft.com/zh-cn/previous-versions/ms173099(v=vs.120)" target="_blank" rel="noopener noreferrer">程序集</a> 包含模块、模块包含类型，而类型包含成员。 反射提供封装程序集、模块和类型的对象。 可以使用反射动态地创建类型的实例，将类型绑定到现有对象，或从现有对象中获取类型。 然后，可以调用类型的方法或访问其字段和属性。</p><h2 id="个人理解" tabindex="-1"><a class="header-anchor" href="#个人理解"><span>个人理解</span></a></h2><p>官方定义的很抽象，结合 <a href="https://www.runoob.com/csharp/csharp-reflection.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a> 里的解释，C#里的一般指，能够通过某个你<strong>不知道类型</strong>的对象中获取到他的类型、并调用其方法、属性等的过程。</p><ul><li>这跟AOT的编译方式有关系，当程序编译后，就会生成程序集文件(.dll.exe后缀的文件)，想了解这些文件怎么来的可以参考这个视频 <a href="https://www.bilibili.com/video/BV1vB4y1V7gR/" target="_blank" rel="noopener noreferrer">【底层】动态链接库(dll)是如何工作的？</a></li></ul><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h2><ul><li>获取对应的程序集及类型信息。 <ul><li>测试的类型：<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Number <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetNameLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Name<span class="token punctuation">.</span>Length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Number<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>反射获取测试类型的相关信息可以参考以下代码，这里继承Mono是方便在Unity中测试。<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionTest</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span></span>
<span class="line"> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// Start is called before the first frame update</span></span>
<span class="line">   <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">Type</span> type <span class="token operator">=</span> Type<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;TestClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">//打印获取到的属性</span></span>
<span class="line">      <span class="token class-name">FieldInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> fieldInfos <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fieldInfos<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;FieldInfo:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">fieldInfos<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">//打印获取到的方法</span></span>
<span class="line">      <span class="token class-name">MethodInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> methodInfos <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> methodInfos<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;MethodInfos:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">methodInfos<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>动态创建类型实例并执行其中的方法： <ul><li>测试的类型：<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Number <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">//新增一个构造函数</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    Name <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    Number <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetNameLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Name<span class="token punctuation">.</span>Length<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Number<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>反射获取测试类型的相关信息可以参考以下代码，这里继承Mono是方便在Unity中测试。<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionTest</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span></span>
<span class="line"> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// Start is called before the first frame update</span></span>
<span class="line">   <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">Type</span> type <span class="token operator">=</span> Type<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;TestClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">//创建对应的类</span></span>
<span class="line">      <span class="token class-name"><span class="token keyword">object</span></span> instance <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">//获取方法</span></span>
<span class="line">      <span class="token class-name">MethodInfo</span> nameLenMethod <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;GetNameLen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token class-name">MethodInfo</span> numMethod <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;GetNumber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">//调用方法</span></span>
<span class="line">      Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>nameLenMethod<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>numMethod<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>动态工厂模式创建对象可以稍微调整对应的输出，工厂类内部获取需要创建的类名字符串作为参数，然后根据获取的类名创建对象返回，具体形式可以参考最底下视频分享。</li></ul></li><li>插件框架、自动化工具 <ul><li>自动化测试，插件框架主要也是获取对应的类，并获取对应的属性，方法再调用。测试的反射获取类与上面的一致，这是自动化测试的示例：</li></ul><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">  <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionTest</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span></span>
<span class="line">   <span class="token punctuation">{</span></span>
<span class="line">     <span class="token comment">// Start is called before the first frame update</span></span>
<span class="line">     <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">     <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Type</span> type <span class="token operator">=</span> Type<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;TestClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取所有方法包括private的</span></span>
<span class="line">        <span class="token class-name">MethodInfo<span class="token punctuation">[</span><span class="token punctuation">]</span></span> methods <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span>BindingFlags<span class="token punctuation">.</span>Public <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Instance <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>NonPublic<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 执行每个方法</span></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> method <span class="token keyword">in</span> methods<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 用于限定测试的方法前缀，我这里仅用了Get</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Get&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">{</span></span>
<span class="line">              Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Running </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">method<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">              method<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">     <span class="token punctuation">}</span> </span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h2><ul><li>提高了程序的灵活性和扩展性，反射可操作任意类型，无需编写硬编码逻辑。</li><li>降低耦合性，提高自适应能力。</li></ul><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h2><ul><li>性能差，使用反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码。</li><li>可读性和可维护性差，程序内部逻辑涉及动态元素，比相应的直接代码更复杂并且生成的错误需要运行时才能发现。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>反射指程序可以访问、检测和修改它本身状态或行为的一种能力；C#中就是获取有关加载的程序集和其中定义的类型的信息，如类、接口和值类型。 并且在运行时动态地创建类型的实例创建、调用和访问类型实例。</li><li>反射提高了程序的灵活性和拓展性，降低了耦合，但是性能开销大，维护成本也高，需要适配对应场景。</li><li>一般的业务开发中应用并不多，了解和发现都是在架构或者插件中，还有热更中也会运用到。我认为了解反射其实更多是为后续能更好的去理解框架底层设计的巧妙之处作铺垫。</li></ul><h2 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展"><span>拓展</span></a></h2><ul><li>泛型 <ul><li>待更新</li></ul></li></ul><h2 id="拓展参考" tabindex="-1"><a class="header-anchor" href="#拓展参考"><span>拓展参考</span></a></h2><ul><li><a href="https://www.bilibili.com/video/BV11N411c7wt/" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV11N411c7wt/</a></li></ul>`,18))])}const b=l(r,[["render",d],["__file","CSharp_Reflection.html.vue"]]),h=JSON.parse('{"path":"/pages/CSharp/CSharp_Reflection.html","title":"反射（Reflection）","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"官方定义","slug":"官方定义","link":"#官方定义","children":[]},{"level":2,"title":"个人理解","slug":"个人理解","link":"#个人理解","children":[]},{"level":2,"title":"应用","slug":"应用","link":"#应用","children":[]},{"level":2,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":2,"title":"缺点","slug":"缺点","link":"#缺点","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"拓展","slug":"拓展","link":"#拓展","children":[]},{"level":2,"title":"拓展参考","slug":"拓展参考","link":"#拓展参考","children":[]}],"git":{"updatedTime":1733160191000,"contributors":[{"name":"CHSYOUYUU","email":"470429276@qq.com","commits":1,"url":"https://github.com/CHSYOUYUU"}]},"filePathRelative":"pages/CSharp/CSharp_Reflection.md"}');export{b as comp,h as data};
