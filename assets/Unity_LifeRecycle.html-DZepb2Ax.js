import{_ as d,c as s,a as e,b as a,d as t,e as u,r,o,f as n}from"./app-JA8LqgYW.js";const p="/Unity/LifeRecycle.png",h={},f={class:"table-of-contents"};function b(k,l){const i=r("router-link");return o(),s("div",null,[l[13]||(l[13]=e("h1",{id:"生命周期",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#生命周期"},[e("span",null,"生命周期")])],-1)),e("nav",f,[e("ul",null,[e("li",null,[a(i,{to:"#定义"},{default:t(()=>l[0]||(l[0]=[n("定义")])),_:1})]),e("li",null,[a(i,{to:"#官方流程示意图"},{default:t(()=>l[1]||(l[1]=[n("官方流程示意图")])),_:1})]),e("li",null,[a(i,{to:"#主要回调的应用"},{default:t(()=>l[2]||(l[2]=[n("主要回调的应用")])),_:1}),e("ul",null,[e("li",null,[a(i,{to:"#awake"},{default:t(()=>l[3]||(l[3]=[n("Awake")])),_:1})]),e("li",null,[a(i,{to:"#onenable"},{default:t(()=>l[4]||(l[4]=[n("OnEnable")])),_:1})]),e("li",null,[a(i,{to:"#start"},{default:t(()=>l[5]||(l[5]=[n("Start")])),_:1})]),e("li",null,[a(i,{to:"#fixedupdate"},{default:t(()=>l[6]||(l[6]=[n("FixedUpdate")])),_:1})]),e("li",null,[a(i,{to:"#update"},{default:t(()=>l[7]||(l[7]=[n("Update")])),_:1})]),e("li",null,[a(i,{to:"#lateupdate"},{default:t(()=>l[8]||(l[8]=[n("LateUpdate")])),_:1})]),e("li",null,[a(i,{to:"#ondisable"},{default:t(()=>l[9]||(l[9]=[n("OnDisable")])),_:1})]),e("li",null,[a(i,{to:"#ondestroy"},{default:t(()=>l[10]||(l[10]=[n("OnDestroy")])),_:1})])])]),e("li",null,[a(i,{to:"#架构意义"},{default:t(()=>l[11]||(l[11]=[n("架构意义")])),_:1}),e("ul",null,[e("li",null,[a(i,{to:"#为什么很多架构底层都设计了这个模块-有什么好处"},{default:t(()=>l[12]||(l[12]=[n("为什么很多架构底层都设计了这个模块？有什么好处？")])),_:1})])])])])]),l[14]||(l[14]=u('<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><p>生命周期函数是一种<strong>事件驱动设计模式</strong>，它通过预定义的函数接口，让系统在特定的时间点自动调用相应的代码。</p><p><strong>事件驱动设计模式</strong>是一种基于事件触发和响应的编程模型，它将程序的行为与系统或用户的事件紧密结合，常用于构建动态、交互性强的应用程序。 其核心是事件的触发和监听。</p><h2 id="官方流程示意图" tabindex="-1"><a class="header-anchor" href="#官方流程示意图"><span>官方流程示意图</span></a></h2><p><img src="'+p+'" alt="生命周期示意图"></p><h2 id="主要回调的应用" tabindex="-1"><a class="header-anchor" href="#主要回调的应用"><span>主要回调的应用</span></a></h2><h3 id="awake" tabindex="-1"><a class="header-anchor" href="#awake"><span>Awake</span></a></h3><ul><li>特性： <ul><li>在脚本实例被创建后立即调用，无论游戏对象的初始状态是激活还是未激活，Awake方法都会被触发；</li><li>在一个生命周期里只会调用一次且仅调用一次；</li></ul></li><li>常见应用场景： <ul><li>初始化变量；</li><li>查找获取组件的引用；</li></ul></li></ul><h3 id="onenable" tabindex="-1"><a class="header-anchor" href="#onenable"><span>OnEnable</span></a></h3><ul><li>特性： <ul><li>当脚本被激活或对象变为可用状态时调用。</li></ul></li><li>常见应用场景： <ul><li>初始化操作如：订阅事件、 注册监听器；</li></ul></li></ul><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start"><span>Start</span></a></h3><ul><li>特性： <ul><li>仅在Update函数第一次调用前调用。</li><li>在一个生命周期里只会调用一次且仅调用一次；</li></ul></li><li>常见应用场景： <ul><li>执行初始化和准备工作，如加载资源、设置初始状态；</li></ul></li></ul><h3 id="fixedupdate" tabindex="-1"><a class="header-anchor" href="#fixedupdate"><span>FixedUpdate</span></a></h3><ul><li>特性： <ul><li>每隔固定时间段执行一次，与帧率无关。</li><li>固定时间执行的效果能尽可能避免不同设备性能导致的物理表现差异；</li></ul></li><li>常见应用场景： <ul><li>处理物理相关的逻辑，比如物体移动和碰撞；</li></ul></li></ul><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>Update</span></a></h3><ul><li>特性： <ul><li>每帧调用一次，频率依赖于帧率。</li><li>根据刷新帧率执行的效果能与用户输入表现一致；</li></ul></li><li>常见应用场景： <ul><li>处理对象的逻辑和行为，比如移动、攻击；</li><li>执行计时器；</li><li>更新UI元素；</li></ul></li></ul><h3 id="lateupdate" tabindex="-1"><a class="header-anchor" href="#lateupdate"><span>LateUpdate</span></a></h3><ul><li>特性： <ul><li>在所有Update函数调用后调用。</li></ul></li><li>常见应用场景： <ul><li>摄像机跟随角色；</li></ul></li></ul><h3 id="ondisable" tabindex="-1"><a class="header-anchor" href="#ondisable"><span>OnDisable</span></a></h3><ul><li>特性： <ul><li>当脚本对象被禁用或不可用时。</li></ul></li><li>常见应用场景： <ul><li>清理操作，如取消事件订阅、解除监听器等；</li><li>停止协程；</li></ul></li></ul><h3 id="ondestroy" tabindex="-1"><a class="header-anchor" href="#ondestroy"><span>OnDestroy</span></a></h3><ul><li>特性： <ul><li>当脚本对象即将被销毁时。</li></ul></li><li>常见应用场景： <ul><li>释放资源、清理数据；</li><li>清除订阅事件以及回调，避免潜在错误或者内存泄漏；</li></ul></li></ul><h2 id="架构意义" tabindex="-1"><a class="header-anchor" href="#架构意义"><span>架构意义</span></a></h2><h3 id="为什么很多架构底层都设计了这个模块-有什么好处" tabindex="-1"><a class="header-anchor" href="#为什么很多架构底层都设计了这个模块-有什么好处"><span>为什么很多架构底层都设计了这个模块？有什么好处？</span></a></h3><ul><li>明确结构，提升可读性：不同功能对应特定函数（如初始化用 Awake，帧更新用 Update），逻辑清晰易维护。</li><li>统一调用顺序，避免依赖冲突：按固定规则执行生命周期函数，确保脚本间依赖关系正确处理。</li><li>支持模块化与复用：每个脚本独立实现所需逻辑，可移植性强，减少耦合。</li><li>便于调试与优化：统一的调用模式和规则，让问题定位和性能调优更加高效。</li><li>适配多场景需求：针对不同功能（如物理、渲染）提供特定函数，满足多样化开发需求。</li><li>团队协作一致性：统一开发规范，简化多人协作中的代码风格管理。</li><li>降低开发难度：新手易上手，复杂逻辑由引擎管理，开发者专注于功能实现。</li></ul><p>这套设计适合游戏开发的高复杂度、多模块化需求，使得开发者能够更加专注于核心逻辑而非底层管理，其兼具灵活性和规范性，是复杂游戏开发中的高效解决方案。</p>',26))])}const g=d(h,[["render",b],["__file","Unity_LifeRecycle.html.vue"]]),U=JSON.parse('{"path":"/pages/Unity/Unity_LifeRecycle.html","title":"生命周期","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"官方流程示意图","slug":"官方流程示意图","link":"#官方流程示意图","children":[]},{"level":2,"title":"主要回调的应用","slug":"主要回调的应用","link":"#主要回调的应用","children":[{"level":3,"title":"Awake","slug":"awake","link":"#awake","children":[]},{"level":3,"title":"OnEnable","slug":"onenable","link":"#onenable","children":[]},{"level":3,"title":"Start","slug":"start","link":"#start","children":[]},{"level":3,"title":"FixedUpdate","slug":"fixedupdate","link":"#fixedupdate","children":[]},{"level":3,"title":"Update","slug":"update","link":"#update","children":[]},{"level":3,"title":"LateUpdate","slug":"lateupdate","link":"#lateupdate","children":[]},{"level":3,"title":"OnDisable","slug":"ondisable","link":"#ondisable","children":[]},{"level":3,"title":"OnDestroy","slug":"ondestroy","link":"#ondestroy","children":[]}]},{"level":2,"title":"架构意义","slug":"架构意义","link":"#架构意义","children":[{"level":3,"title":"为什么很多架构底层都设计了这个模块？有什么好处？","slug":"为什么很多架构底层都设计了这个模块-有什么好处","link":"#为什么很多架构底层都设计了这个模块-有什么好处","children":[]}]}],"git":{},"filePathRelative":"pages/Unity/Unity_LifeRecycle.md"}');export{g as comp,U as data};
