import{_ as r,c as s,a as t,b as n,d as a,e as o,r as d,o as p,f as i}from"./app-JA8LqgYW.js";const h={},m={class:"table-of-contents"};function u(c,e){const l=d("router-link");return p(),s("div",null,[e[8]||(e[8]=t("h1",{id:"面向对象编程-object-oriented-programming",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#面向对象编程-object-oriented-programming"},[t("span",null,"面向对象编程(Object Oriented Programming)")])],-1)),t("nav",m,[t("ul",null,[t("li",null,[n(l,{to:"#定义"},{default:a(()=>e[0]||(e[0]=[i("定义")])),_:1})]),t("li",null,[n(l,{to:"#特性"},{default:a(()=>e[1]||(e[1]=[i("特性")])),_:1}),t("ul",null,[t("li",null,[n(l,{to:"#封装"},{default:a(()=>e[2]||(e[2]=[i("封装")])),_:1})]),t("li",null,[n(l,{to:"#继承"},{default:a(()=>e[3]||(e[3]=[i("继承")])),_:1})]),t("li",null,[n(l,{to:"#多态"},{default:a(()=>e[4]||(e[4]=[i("多态")])),_:1})])])]),t("li",null,[n(l,{to:"#拓展"},{default:a(()=>e[5]||(e[5]=[i("拓展")])),_:1}),t("ul",null,[t("li",null,[n(l,{to:"#ecs-entity-component-system-架构"},{default:a(()=>e[6]||(e[6]=[i("ECS(Entity Component System)架构")])),_:1})]),t("li",null,[n(l,{to:"#gdc上overwatch关于ecs的分享"},{default:a(()=>e[7]||(e[7]=[i("GDC上OVERWATCH关于ECS的分享")])),_:1})])])])])]),e[9]||(e[9]=o('<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><p>面向对象编程(Object Oriented Programming)是一种编程范式，其核心思想是将程序组织为对象的集合，每个对象都拥有自己的属性和方法，并且可以与其他对象进行交互。</p><p>OOP在C#中有充分的体现，了解OOP思想有助于了解C#语言的使用。</p><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><h3 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h3><ul><li>定义：将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。</li><li>体现：类中属性、方法的修饰符如public、private控制其中的显示与隐藏。</li></ul><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h3><ul><li>定义：子类自动继承父类的属性和方法，并可以添加新的属性和方法。</li><li>体现：关键字extends（继承）使得子类能够有父类的属性和方法，并能够拓展自己独有的方法。</li></ul><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h3><ul><li>定义：同一个引用类型，使用不同的实例而执行不同操作。</li><li>体现：利用重载（overload），重写（override）还有继承（extends）实现方法和子类的多样。</li></ul><h2 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展"><span>拓展</span></a></h2><h3 id="ecs-entity-component-system-架构" tabindex="-1"><a class="header-anchor" href="#ecs-entity-component-system-架构"><span><a href="">ECS(Entity Component System)架构</a></span></a></h3><ul><li>ECS(Entity Component System)是面向数据(Data-Oriented)技术栈的核心，ECS有三个主要部分：Entities(实体)、Components(组件)、Systems(系统)。</li><li>在一个World中拥有用于管理Entity和Component的System就是基本结构，相对于OOP的对不同的整个Object管理，它单独对Entity或者Component管理。</li><li>三者关系：Entity是一个实体，没有数据和方法，Component为Entity添加数据，Systems提供方法控制Entities和Components。</li></ul><h3 id="gdc上overwatch关于ecs的分享" tabindex="-1"><a class="header-anchor" href="#gdc上overwatch关于ecs的分享"><span>GDC上OVERWATCH关于ECS的分享</span></a></h3><p><a href="https://www.bilibili.com/video/BV1p4411k7N8/" target="_blank" rel="noopener noreferrer">b站UP翻译</a></p><p><a href="https://youtu.be/W3aieHjyNvw" target="_blank" rel="noopener noreferrer">油管原链接</a></p>',16))])}const f=r(h,[["render",u],["__file","CSharp_OOP.html.vue"]]),g=JSON.parse('{"path":"/pages/CSharp/CSharp_OOP.html","title":"面向对象编程(Object Oriented Programming)","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"特性","slug":"特性","link":"#特性","children":[{"level":3,"title":"封装","slug":"封装","link":"#封装","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"多态","slug":"多态","link":"#多态","children":[]}]},{"level":2,"title":"拓展","slug":"拓展","link":"#拓展","children":[{"level":3,"title":"ECS(Entity Component System)架构","slug":"ecs-entity-component-system-架构","link":"#ecs-entity-component-system-架构","children":[]},{"level":3,"title":"GDC上OVERWATCH关于ECS的分享","slug":"gdc上overwatch关于ecs的分享","link":"#gdc上overwatch关于ecs的分享","children":[]}]}],"git":{"updatedTime":1733658144000,"contributors":[{"name":"CHSYOUYUU","email":"470429276@qq.com","commits":1,"url":"https://github.com/CHSYOUYUU"}]},"filePathRelative":"pages/CSharp/CSharp_OOP.md"}');export{f as comp,g as data};
