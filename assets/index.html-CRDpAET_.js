import{_ as u,c as p,a as e,b as n,d as i,e as a,f as l,r as d,o}from"./app-JA8LqgYW.js";const g="/BlogBuild/PagesSetting.png",h="/BlogBuild/PagesSite.png",b="/BlogBuild/PagesName.png",v="/BlogBuild/FileDir.png",m={},f={class:"table-of-contents"};function c(x,s){const t=d("router-link"),r=d("RouteLink");return o(),p("div",null,[s[39]||(s[39]=e("h1",{id:"搭建流程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#搭建流程"},[e("span",null,"搭建流程")])],-1)),e("nav",f,[e("ul",null,[e("li",null,[n(t,{to:"#前置准备"},{default:i(()=>s[0]||(s[0]=[l("前置准备")])),_:1}),e("ul",null,[e("li",null,[n(t,{to:"#node-js与npm"},{default:i(()=>s[1]||(s[1]=[l("Node.js与npm")])),_:1})]),e("li",null,[n(t,{to:"#github-account"},{default:i(()=>s[2]||(s[2]=[l("Github Account")])),_:1})]),e("li",null,[n(t,{to:"#检查"},{default:i(()=>s[3]||(s[3]=[l("检查")])),_:1})])])]),e("li",null,[n(t,{to:"#基本流程"},{default:i(()=>s[4]||(s[4]=[l("基本流程")])),_:1}),e("ul",null,[e("li",null,[n(t,{to:"#pages"},{default:i(()=>s[5]||(s[5]=[l("Pages")])),_:1})]),e("li",null,[n(t,{to:"#vuepress"},{default:i(()=>s[6]||(s[6]=[l("VuePress")])),_:1})]),e("li",null,[n(t,{to:"#打包并部署"},{default:i(()=>s[7]||(s[7]=[l("打包并部署")])),_:1})])])]),e("li",null,[n(t,{to:"#踩坑回顾"},{default:i(()=>s[8]||(s[8]=[l("踩坑回顾")])),_:1}),e("ul",null,[e("li",null,[n(t,{to:"#github开启pages"},{default:i(()=>s[9]||(s[9]=[l("GitHub开启Pages")])),_:1})]),e("li",null,[n(t,{to:"#项目目录与路由关系"},{default:i(()=>s[10]||(s[10]=[l("项目目录与路由关系")])),_:1})]),e("li",null,[n(t,{to:"#项目部署与deploy-sh"},{default:i(()=>s[11]||(s[11]=[l("项目部署与deploy.sh")])),_:1})]),e("li",null,[n(t,{to:"#github的ssh-push"},{default:i(()=>s[12]||(s[12]=[l("github的ssh push")])),_:1})]),e("li",null,[n(t,{to:"#参考文章"},{default:i(()=>s[13]||(s[13]=[l("参考文章")])),_:1})])])])])]),s[40]||(s[40]=a(`<h2 id="前置准备" tabindex="-1"><a class="header-anchor" href="#前置准备"><span>前置准备</span></a></h2><h3 id="node-js与npm" tabindex="-1"><a class="header-anchor" href="#node-js与npm"><span>Node.js与npm</span></a></h3><p>安装 <a href="https://nodejs.org/zh-cn/download/prebuilt-installer" target="_blank" rel="noopener noreferrer">Node</a> 的同时也会安装npm。</p><p>VuePress需要的node版本为Node.js v18.19.0+， 如果版本不对记得对Node更新。</p><p>如果没怎么接触过web前端，推荐用安装包的方式傻瓜式安装Node。</p><h3 id="github-account" tabindex="-1"><a class="header-anchor" href="#github-account"><span>Github Account</span></a></h3><p>要想在Github上部署当然还需要一个Github的账号，都看到这篇文章应该都有吧？没有的话可以在 <a href="https://github.com/signup" target="_blank" rel="noopener noreferrer">Github</a> 注册。</p><h3 id="检查" tabindex="-1"><a class="header-anchor" href="#检查"><span>检查</span></a></h3><p>可以在命令行输入以下代码查看安装情况，显示为符合需求的版本即完成：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">node -v</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="基本流程" tabindex="-1"><a class="header-anchor" href="#基本流程"><span>基本流程</span></a></h2><h3 id="pages" tabindex="-1"><a class="header-anchor" href="#pages"><span>Pages</span></a></h3><p>通过GitHub的 <a href="https://docs.github.com/zh/pages/quickstart" target="_blank" rel="noopener noreferrer">Pages快速入门</a> 可以创建对应的仓库，后续就以此建立博客。</p><h3 id="vuepress" tabindex="-1"><a class="header-anchor" href="#vuepress"><span>VuePress</span></a></h3>`,14)),e("ul",null,[e("li",null,[s[21]||(s[21]=l("根据 ")),s[22]||(s[22]=e("a",{href:"https://vuepress.vuejs.org/zh/guide/getting-started.html",target:"_blank",rel:"noopener noreferrer"},"VuePress快速上手",-1)),s[23]||(s[23]=l(" 步骤完成项目的创建。 ")),e("ul",null,[e("li",null,[s[15]||(s[15]=l("在对应目录下创建VuePress项目推送，这样需要添加SSH密钥，可以参考 ")),n(r,{to:"/pages/BlogBuild/#github%E7%9A%84ssh-push"},{default:i(()=>s[14]||(s[14]=[e("strong",null,"github的ssh push",-1)])),_:1}),s[16]||(s[16]=l(" 的方式推送到你对应的Pages仓库。"))]),s[20]||(s[20]=e("li",null,"如果选择拉取对应的Pages仓库再添加VuePress可以从安装 VuePress这一步开始。",-1)),e("li",null,[s[18]||(s[18]=l("请务必根据对应的目录格式创建，可以参考")),n(r,{to:"/pages/BlogBuild/#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"},{default:i(()=>s[17]||(s[17]=[e("strong",null,"参考文章",-1)])),_:1}),s[19]||(s[19]=l(" 目录样式。"))])])]),s[24]||(s[24]=a(`<li>完成VuePress项目的创建后可以根据快速入门的 <a href="https://vuepress.vuejs.org/zh/guide/getting-started.html#%E5%90%AF%E5%8A%A8%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener noreferrer"><strong>开始使用vuepress</strong></a> 步骤执行对应指令启动开发服务器，看看对应的效果。<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">npm run docs:dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li>`,1))]),s[41]||(s[41]=e("h3",{id:"打包并部署",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#打包并部署"},[e("span",null,"打包并部署")])],-1)),e("ul",null,[s[34]||(s[34]=a(`<li>打包 <ul><li>打包需要打包工具vite，参考 <a href="https://vuepress.vuejs.org/zh/reference/bundler/vite.html" target="_blank" rel="noopener noreferrer">官网</a> 引入并设置。</li><li>执行对应的命令即可完成打包<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">npm run docs:build</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>执行完会在 <strong>docs/.vuepress/dist</strong> 目录中可以找到打包生成的静态文件。</li></ul></li>`,1)),e("li",null,[s[33]||(s[33]=l("部署到Github ")),e("ul",null,[s[30]||(s[30]=e("li",null,[l("在Page项目新开一个分支用于部署，我这里命名为 "),e("strong",null,"pages"),l("。")],-1)),e("li",null,[s[29]||(s[29]=l("将打包好的静态文件上传到对应的分支。 ")),e("ul",null,[s[28]||(s[28]=e("li",null,"进入对应的dist文件夹再将对应文件提交推送到Github上。",-1)),e("li",null,[s[26]||(s[26]=a(`可以参考以下对应的命令行指令：<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># 生成静态文件</span>
<span class="line">npm run build</span>
<span class="line"></span>
<span class="line"># 进入生成的文件夹</span>
<span class="line">cd docs/.vuepress/dist</span>
<span class="line"></span>
<span class="line"># 提交</span>
<span class="line">git init</span>
<span class="line">git add -A</span>
<span class="line">git commit -m &#39;deploy&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>如果没有SSH密钥是无法提交的，可以参考 `,3)),n(r,{to:"/pages/BlogBuild/#github%E7%9A%84ssh-push"},{default:i(()=>s[25]||(s[25]=[e("strong",null,"github的ssh push",-1)])),_:1}),s[27]||(s[27]=a(` 生成，在提交。<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># 请将后面的链接和对应的分支替换成你的仓库以及对应分支，可以在仓库的SSH拉取处获取。</span>
<span class="line"># 注意这里的push需要你有SSH密钥才能成功。</span>
<span class="line">git push -f git@github.com:CHSYOUYUU/CHSYOUYUU.github.io.git master:pages</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2))])])]),s[31]||(s[31]=e("li",null,[l("设置仓库的Pages主页。 "),e("img",{src:g,alt:"设置路径"})],-1)),s[32]||(s[32]=e("li",null,[l("过5-10分钟后打开对应的链接查看部署情况。 "),e("img",{src:h,alt:"链接路径"})],-1))])])]),s[42]||(s[42]=a('<h2 id="踩坑回顾" tabindex="-1"><a class="header-anchor" href="#踩坑回顾"><span>踩坑回顾</span></a></h2><h3 id="github开启pages" tabindex="-1"><a class="header-anchor" href="#github开启pages"><span>GitHub开启Pages</span></a></h3><ul><li>创建仓库的时候务必确认名称正确和公开，不然访问不到。 <img src="'+b+'" alt="Pages名称"></li></ul><h3 id="项目目录与路由关系" tabindex="-1"><a class="header-anchor" href="#项目目录与路由关系"><span>项目目录与路由关系</span></a></h3>',4)),e("ul",null,[e("li",null,[s[36]||(s[36]=l("项目的目录务必遵循对应的规则，不然后续地址跳转以及图片引用都会出错，具体可以底下 ")),n(r,{to:"/pages/BlogBuild/#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"},{default:i(()=>s[35]||(s[35]=[e("strong",null,"参考文章",-1)])),_:1}),s[37]||(s[37]=l(" 里的目录。"))]),s[38]||(s[38]=e("li",null,[l("这里是我的目录： "),e("ul",null,[e("li",null,[e("img",{src:v,alt:"项目目录"})])])],-1))]),s[43]||(s[43]=a(`<h3 id="项目部署与deploy-sh" tabindex="-1"><a class="header-anchor" href="#项目部署与deploy-sh"><span>项目部署与deploy.sh</span></a></h3><ul><li>因为Pages他有个固定的首页目录获取规则，所以需要新建对应的分支来推送。</li><li>项目部署需要将编译后的静态文件推送到对应位置，每次都要执行跳转相近的命令，执行脚本文件就方便很多。 <ul><li>这是我的deploy.sh脚本内的代码：<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># 确保脚本抛出遇到的错误</span>
<span class="line">set -e</span>
<span class="line"></span>
<span class="line"># 生成静态文件</span>
<span class="line">npm run build</span>
<span class="line"></span>
<span class="line"># 进入生成的文件夹</span>
<span class="line">cd docs/.vuepress/dist</span>
<span class="line"></span>
<span class="line"># 提交</span>
<span class="line">git init</span>
<span class="line">git add -A</span>
<span class="line">git commit -m &#39;deploy&#39;</span>
<span class="line"></span>
<span class="line"># 请将后面的链接和对应的分支替换成你的仓库以及对应分支，可以在仓库的SSH拉取处获取。</span>
<span class="line">git push -f git@github.com:CHSYOUYUU/CHSYOUYUU.github.io.git master:pages</span>
<span class="line"></span>
<span class="line">cd -</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>然后每次部署只需要执行就可以自动完成部署了。<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">sh deploy.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="github的ssh-push" tabindex="-1"><a class="header-anchor" href="#github的ssh-push"><span>github的ssh push</span></a></h3><ul><li>因为有可能是clone下来的项目（比如我）没有密钥是不能用命令行推送代码的。</li><li>可以参考下面参考文章的第二个 <a href="https://juejin.cn/post/6844903999129436174" target="_blank" rel="noopener noreferrer"><strong>链接</strong></a> ，或者网络上其他方法，记得本地生成后的密钥要同步到对应仓库的设置才能生效。</li></ul><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h3><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/235" target="_blank" rel="noopener noreferrer">https://github.com/mqyqingfeng/Blog/issues/235</a></li><li><a href="https://juejin.cn/post/6844903999129436174" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6844903999129436174</a></li><li><a href="https://leoleor.github.io/Lion_Blog/articles/site/githubPages.html" target="_blank" rel="noopener noreferrer">https://leoleor.github.io/Lion_Blog/articles/site/githubPages.html</a></li></ul>`,6))])}const B=u(m,[["render",c],["__file","index.html.vue"]]),P=JSON.parse('{"path":"/pages/BlogBuild/","title":"搭建流程","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"前置准备","slug":"前置准备","link":"#前置准备","children":[{"level":3,"title":"Node.js与npm","slug":"node-js与npm","link":"#node-js与npm","children":[]},{"level":3,"title":"Github Account","slug":"github-account","link":"#github-account","children":[]},{"level":3,"title":"检查","slug":"检查","link":"#检查","children":[]}]},{"level":2,"title":"基本流程","slug":"基本流程","link":"#基本流程","children":[{"level":3,"title":"Pages","slug":"pages","link":"#pages","children":[]},{"level":3,"title":"VuePress","slug":"vuepress","link":"#vuepress","children":[]},{"level":3,"title":"打包并部署","slug":"打包并部署","link":"#打包并部署","children":[]}]},{"level":2,"title":"踩坑回顾","slug":"踩坑回顾","link":"#踩坑回顾","children":[{"level":3,"title":"GitHub开启Pages","slug":"github开启pages","link":"#github开启pages","children":[]},{"level":3,"title":"项目目录与路由关系","slug":"项目目录与路由关系","link":"#项目目录与路由关系","children":[]},{"level":3,"title":"项目部署与deploy.sh","slug":"项目部署与deploy-sh","link":"#项目部署与deploy-sh","children":[]},{"level":3,"title":"github的ssh push","slug":"github的ssh-push","link":"#github的ssh-push","children":[]},{"level":3,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}]}],"git":{"updatedTime":1732726770000,"contributors":[{"name":"CHSYOUYUU","email":"470429276@qq.com","commits":7,"url":"https://github.com/CHSYOUYUU"}]},"filePathRelative":"pages/BlogBuild/README.md"}');export{B as comp,P as data};
