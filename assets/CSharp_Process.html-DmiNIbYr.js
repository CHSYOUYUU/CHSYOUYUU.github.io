import{_ as r,c as s,a as l,b as n,d as i,e as d,r as o,o as h,f as a}from"./app-JA8LqgYW.js";const u={},p={class:"table-of-contents"};function g(c,t){const e=o("router-link");return h(),s("div",null,[t[12]||(t[12]=l("h1",{id:"进程-process-线程-thread-协程-coroutine",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#进程-process-线程-thread-协程-coroutine"},[l("span",null,"进程（Process）线程（Thread）协程（Coroutine）")])],-1)),l("nav",p,[l("ul",null,[l("li",null,[n(e,{to:"#定义"},{default:i(()=>t[0]||(t[0]=[a("定义")])),_:1}),l("ul",null,[l("li",null,[n(e,{to:"#进程定义"},{default:i(()=>t[1]||(t[1]=[a("进程定义")])),_:1})]),l("li",null,[n(e,{to:"#线程定义"},{default:i(()=>t[2]||(t[2]=[a("线程定义")])),_:1})]),l("li",null,[n(e,{to:"#协程定义"},{default:i(()=>t[3]||(t[3]=[a("协程定义")])),_:1})])])]),l("li",null,[n(e,{to:"#特点"},{default:i(()=>t[4]||(t[4]=[a("特点")])),_:1}),l("ul",null,[l("li",null,[n(e,{to:"#进程特点"},{default:i(()=>t[5]||(t[5]=[a("进程特点")])),_:1})]),l("li",null,[n(e,{to:"#线程特点"},{default:i(()=>t[6]||(t[6]=[a("线程特点")])),_:1})]),l("li",null,[n(e,{to:"#协程特点"},{default:i(()=>t[7]||(t[7]=[a("协程特点")])),_:1})])])]),l("li",null,[n(e,{to:"#异同"},{default:i(()=>t[8]||(t[8]=[a("异同")])),_:1})]),l("li",null,[n(e,{to:"#总结"},{default:i(()=>t[9]||(t[9]=[a("总结")])),_:1})]),l("li",null,[n(e,{to:"#拓展"},{default:i(()=>t[10]||(t[10]=[a("拓展")])),_:1}),l("ul",null,[l("li",null,[n(e,{to:"#unity内是否支持多线程"},{default:i(()=>t[11]||(t[11]=[a("Unity内是否支持多线程？")])),_:1})])])])])]),t[13]||(t[13]=d('<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><p>进程、线程和协程是计算机程序设计中用于实现并发和并行执行的三种重要概念。</p><h3 id="进程定义" tabindex="-1"><a class="header-anchor" href="#进程定义"><span>进程定义</span></a></h3><p>进程是正在运行的<strong>程序的实例</strong>，是操作系统分配资源的基本单位，是一个独立的执行环境，包含了程序代码、数据和系统资源。每个进程都在自己的内存空间中运行，相互之间不会直接共享数据。</p><h3 id="线程定义" tabindex="-1"><a class="header-anchor" href="#线程定义"><span>线程定义</span></a></h3><p>线程是<strong>进程的执行单元</strong>，一个进程可以包含多个线程。线程共享进程的地址空间和系统资源，可以直接访问共享的数据，但也因此需要注意线程间的同步与互斥，以避免数据竞争。</p><h3 id="协程定义" tabindex="-1"><a class="header-anchor" href="#协程定义"><span>协程定义</span></a></h3><p>协程是<strong>一种用户态的轻量级线程</strong>，是一种轻量级的、用户态的并发编程概念，它在代码中可以被看作是一种特殊的函数，可以在代码执行过程中暂停和恢复。协程不受操作系统调度，由开发者手动控制调度，因此可以实现高效的任务切换。</p><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h2><p>进程、线程和协程各自具有不同的特性和使用场景。</p><h3 id="进程特点" tabindex="-1"><a class="header-anchor" href="#进程特点"><span>进程特点</span></a></h3><ul><li>资源独立：每个进程有独立的内存空间，资源互不干扰。</li><li>通信复杂：进程间通信比较复杂，需要通过管线、消息队列、共享内存等机制实现通信。</li><li>开销较大：创建和销毁进程需要较多的系统开销。</li></ul><h3 id="线程特点" tabindex="-1"><a class="header-anchor" href="#线程特点"><span>线程特点</span></a></h3><ul><li>进程内共享：多线程共享进程的空间和资源，但有独立的栈和寄存器。</li><li>通信高效：线程间可以直接共享进程的资源，进行数据交换和通信时更高效，需要共享变量和锁实现通信。</li><li>轻量级：相比于进程，线程创建和销毁的开销较小。</li></ul><h3 id="协程特点" tabindex="-1"><a class="header-anchor" href="#协程特点"><span>协程特点</span></a></h3><ul><li>线程内共享：协程在同一线程运行，共享线程内的资源。</li><li>通信非常高效：协程在同一线程内运行，可直接访问线程的共享内存。</li><li>调度方便：协程由用户显式调度，可以在执行过程中暂停，并在需要时恢复执行，无需操作系统参与。</li><li>低开销：协程的创建切换都不需要进行内核态和用户态之间的切换，开销小</li></ul><h2 id="异同" tabindex="-1"><a class="header-anchor" href="#异同"><span>异同</span></a></h2><ul><li>调度：进程和线程都是由操作系统管理的，而协程是由程序员手动控制调度。</li><li>资源：进程之间资源相互独立，线程可以共享进程的资源，而协程也可以在同一线程内共享数据。</li><li>通信：进程之间通信需要使用特定的进程间通信机制，线程间通信较为直接，而协程通信也可以通过共享数据进行。</li><li>开销：进程的创建和销毁开销较大，线程创建和销毁的开销相对较小，而协程更加轻量级。</li><li>适用场景：协程适合处理 I/O 密集型任务，而线程和进程适合处理计算密集型任务。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li><table><thead><tr><th style="text-align:center;">特性</th><th style="text-align:center;">进程</th><th style="text-align:center;">线程</th><th style="text-align:center;">协程</th></tr></thead><tbody><tr><td style="text-align:center;">定义</td><td style="text-align:center;">拥有独立资源和空间的独立执行单位</td><td style="text-align:center;">共享进程资源的执行单元</td><td style="text-align:center;">用户态的轻量级线程</td></tr><tr><td style="text-align:center;">开销</td><td style="text-align:center;">大</td><td style="text-align:center;">较小</td><td style="text-align:center;">最小</td></tr><tr><td style="text-align:center;">共享</td><td style="text-align:center;">不共享</td><td style="text-align:center;">共享进程内存</td><td style="text-align:center;">共享线程内存</td></tr><tr><td style="text-align:center;">通信</td><td style="text-align:center;">复杂（IPC）</td><td style="text-align:center;">较简单</td><td style="text-align:center;">简单</td></tr><tr><td style="text-align:center;">调度</td><td style="text-align:center;">操作系统内核调度</td><td style="text-align:center;">操作系统内核调度</td><td style="text-align:center;">用户显式调度</td></tr><tr><td style="text-align:center;">适用场景</td><td style="text-align:center;">需要隔离保护不同模块的大型应用</td><td style="text-align:center;">多任务并发，高效通信任务</td><td style="text-align:center;">大量并发的任务，I/O密集型任务</td></tr></tbody></table></li><li>由进程到线程再到协程，三者之间的通信和调度越来越简单方便、而计算能力越来越差，因此根据应用场景更需要计算，读写，高并发，还是通信来做选择</li></ul><h2 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展"><span>拓展</span></a></h2><h3 id="unity内是否支持多线程" tabindex="-1"><a class="header-anchor" href="#unity内是否支持多线程"><span>Unity内是否支持多线程？</span></a></h3><ul><li>Unity是支持多线程的，使用System.Threading类即可；</li><li>Unity的对象和组件不支持多线程，需要在主线程调用；</li><li>Unity的多线程可以用于执行A*寻路等计算型任务；</li><li>如果需要引用的对应的Unity对象可以使用协程实现；</li></ul>',23))])}const y=r(u,[["render",g],["__file","CSharp_Process.html.vue"]]),f=JSON.parse('{"path":"/pages/CSharp/CSharp_Process.html","title":"进程（Process）线程（Thread）协程（Coroutine）","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[{"level":3,"title":"进程定义","slug":"进程定义","link":"#进程定义","children":[]},{"level":3,"title":"线程定义","slug":"线程定义","link":"#线程定义","children":[]},{"level":3,"title":"协程定义","slug":"协程定义","link":"#协程定义","children":[]}]},{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[{"level":3,"title":"进程特点","slug":"进程特点","link":"#进程特点","children":[]},{"level":3,"title":"线程特点","slug":"线程特点","link":"#线程特点","children":[]},{"level":3,"title":"协程特点","slug":"协程特点","link":"#协程特点","children":[]}]},{"level":2,"title":"异同","slug":"异同","link":"#异同","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"拓展","slug":"拓展","link":"#拓展","children":[{"level":3,"title":"Unity内是否支持多线程？","slug":"unity内是否支持多线程","link":"#unity内是否支持多线程","children":[]}]}],"git":{"updatedTime":1733658144000,"contributors":[{"name":"CHSYOUYUU","email":"470429276@qq.com","commits":2,"url":"https://github.com/CHSYOUYUU"}]},"filePathRelative":"pages/CSharp/CSharp_Process.md"}');export{y as comp,f as data};
